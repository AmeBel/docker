# When reading comments in this file note that the number of '#' points on what
# level you are. The more there are the granular the details.

# Main Configuration Structure:
# This section is the definition of the overall structure of the configuration
# dictionary. Each repository adds to the arrays found in this section. All
# the python modules required are imported in this section and the common
# varaiables are declared here too.

c = BuildmasterConfig = {}

## PROJECT IDENTITY = Site Definitions
c['title'] = "OpenCog"
c['titleURL'] = "http://opencog.org"
c['buildbotURL'] = "http://localhost:8010/"

## DB URL
c['db'] = {'db_url' : "sqlite:///state.sqlite"}

## Each slave is a container declared for each repository.
from buildbot.buildslave import BuildSlave
c['slaves'] = []
c['slavePortnum'] = 9989

### These are the names of the containers. One Container/slave is used per repo
### so as to avoid pollution of environments. Each container/slave has the same
### name as the repositories for which it handles builds for, that are invoked
### by the builders.
c['slaves'].append(BuildSlave("cogutils", "XXXXXX"))
c['slaves'].append(BuildSlave("atomspace", "XXXXXX"))
c['slaves'].append(BuildSlave("opencog", "XXXXXX"))
c['slaves'].append(BuildSlave("doxygen", "XXXXXX"))

### Don't change the name of cicero-slave because it is not a container but
### a windows pc used for unity3d-opencog-game repository.
c['slaves'].append(BuildSlave("cicero-slave", "XXXXXX"))

## Changes is repositories
from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
## directory where the source code is found.
source_dir = "source"

## Status Notifications
from buildbot.status import html, words, mail
from buildbot.status.web import authz, auth
c['status'] = []

authz_cfg=authz.Authz(
            gracefulShutdown = False,
            forceBuild = True,
            forceAllBuilds = False,
            pingBuilder = False,
            stopBuild = False,
            stopAllBuilds = False,
            cancelPendingBuild = False,
            )
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

irc = words.IRC("irc.freenode.org", "opencog-buildbot",
            useColors=True,
            channels=[{"channel":  "opencog"}],
            # {"password": "XXXXXX" }],
            password="XXXXXX",
            allowForce=True,
            notify_events={
            # 'started': 1,
            # 'finished': 1,
            'exception': 1,
            'successToFailure': 1,
            'failureToSuccess': 1,
            })
c['status'].append(irc)

c['status'].append(mail.MailNotifier(
            fromaddr="buildbot@opencog.org",
            useTls=True,
            relayhost="smtp.gmail.com",
            smtpPort=587,
            smtpUser="buildbot@opencog.org",
            smtpPassword="XXXXXX",
            extraRecipients=["opencog-buildbot@googlegroups.com"],
            sendToInterestedUsers=True
            ))

## Schedulers
from buildbot.plugins import schedulers, util
c['schedulers'] = []

### Names of SingleBranchScheduler associated with a repository have the
### following name structure:
###         'project-name_branch-name_operating-system_full/quick'
###
### The ForceScheduler & Nightly is not defined in each builder section so on
### adding or removing builders modify the 'builderNames' list here.
c['schedulers'].append(schedulers.ForceScheduler(
                name = "force",
                builderNames = ["opencog_master_trusty", 
                                "unity3d_opencog_game_master_win7",
                                "cogutils_master_trusty",
                                #"cogutils_master_install",
                                "atomspace_master_trusty"]
                ))
'''
c['schedulers'].append(schedulers.Nightly(
                name='nightly',
                branch='master',
                builderNames=['doxygen_trusty'],
                hour=3,
                minute=0)) '''
## Builders
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Property, Interpolate
from buildbot.plugins import steps
import os.path

### Names of builders associated with a repository have the folloiwng name
### structure:
###         'project-name_branch-name_operating-system'
###
### Names of builders which are independent of repostory have the following
### name structure:
###         'whatever_makes_sense_operating-system'
###
### The factories associated with a builder have the following name structure:
###         'project-name_branch-name_operating-system'
c['builders'] = []

### Build directory name used across the common steps below.
cmakes_build_dir = "build"
doxygen_dir = "doxygen"

### Common Steps used across builders are defined here.
rm_existing_build_dir = steps.ShellCommand(
                command = ["rm","-rf", cmakes_build_dir],
                description = ["removing", "existing", "build", "directory"],
                descriptionDone = ["removed","existing", "build", "directory"]
                )

mkdir_build_dir = steps.ShellCommand(
                command = ["mkdir","-p", cmakes_build_dir],
                description = ["making", "build", "directory"],
                descriptionDone = ["made", "build", "directory"]
                )

# This directory is where doxygen documenation builds are copied to.
mkdir_doxygen_dir = steps.ShellCommand(
                command = ["mkdir","-p", doxygen_dir],
                description = ["making", "build", "directory"],
                descriptionDone = ["made", "build", "directory"]
                )

cmake_source = steps.Configure(
                workdir = os.path.join(source_dir, cmakes_build_dir),
                command = ["cmake", ".."],
                description = ["configuring", "build", "using", "cmake"],
                descriptionDone = ["configured", "for", "build", "and", "test"]
                )

make_all = steps.Compile(
                workdir = os.path.join(source_dir, cmakes_build_dir),
                command = ["make", "-j10"],
                description = ["making", "all"],
                descriptionDone = ["make", "all"]
                )

make_examples = steps.Compile(
                workdir = os.path.join(source_dir, cmakes_build_dir),
                command = ["make", "-j10" , "examples"],
                description = ["making", "examples"],
                descriptionDone = ["make", "examples"]
                )

make_tests = steps.Compile(
                workdir = os.path.join(source_dir, cmakes_build_dir),
                command = ["make", "-j10" , "tests"],
                description = ["making", "tests"],
                descriptionDone = ["make", "tests"]
                )

run_tests = steps.Test(
                workdir = os.path.join(source_dir, cmakes_build_dir),
                command = ["make",  "test"],
                description = ["running", "tests"],
                descriptionDone = ["run", "tests"],
                logfiles = {"testlog":
                                {"filename":
                                    "tests/Testing/Temporary/LastTest.log.tmp"}}
                )

make_doxygen = steps.Compile(
                workdir = os.path.join(source_dir, cmakes_build_dir),
                command = ["make", "doxygen"],
                description = ["making", "doxygen"],
                descriptionDone = ["made", "doxygen"]
                )

copy_doxygen_docs = steps.CopyDirectory(
                src = os.path.join(source_dir, cmakes_build_dir, "doc", "html"),
                dest= doxygen_dir
                )

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# Configuration for builders:
# There are builders for testing different repositories and a single builder
# for documentation(the doxygen builder).

## Configuration for cogutils repository master branch build and test on
## Ubuntu 14.04
## url: https://github.com/opencog/cogutils.git

### Builder Details
c['change_source'].append(GitPoller(
                'https://github.com/opencog/cogutils.git',
                workdir = 'gitpoller-workdir-cogutils',
                branches = ['master'],
                pollinterval = 10*60,
                project = 'cogutils'
                ))

c['schedulers'].append(schedulers.SingleBranchScheduler(
                name = "cogutils_master_trusty_full",
                change_filter = util.ChangeFilter(project='cogutils'),
                treeStableTimer = 2*60,
                builderNames = ["cogutils_master_trusty"]
                ))

### Steps
cogutils_master_trusty = BuildFactory()
cogutils_master_trusty.workdir = source_dir
cogutils_master_trusty.timeout = 2400

cogutils_master_trusty.addStep(steps.Git(
                repourl = 'https://github.com/opencog/cogutils.git',
                mode = 'full',
                branch = 'master',
                progress = True
                ))

cogutils_master_trusty.addStep(rm_existing_build_dir)
cogutils_master_trusty.addStep(mkdir_build_dir)
cogutils_master_trusty.addStep(mkdir_doxygen_dir)
cogutils_master_trusty.addStep(cmake_source)
cogutils_master_trusty.addStep(make_all)
cogutils_master_trusty.addStep(make_tests)
cogutils_master_trusty.addStep(run_tests)
cogutils_master_trusty.addStep(make_doxygen)
cogutils_master_trusty.addStep(copy_doxygen_docs)
#cogutils_master_trusty.addStep(steps.ShellCommand(command=['echo', 'buildername:', Property('buildername')]))


cogutils_master_trusty.addStep(steps.Trigger(schedulerNames=['install2'],
                        updateSourceStamp=True,
                        set_properties={'install-cogutil' : True}))



c['schedulers'].append(schedulers.Triggerable(name="install2",
                builderNames=["update_buildslaves"]))

update_buildslaves = BuildFactory()
update_buildslaves.workdir = source_dir
update_buildslaves.timeout = 2400

update_buildslaves.addStep(steps.ShellCommand(
                command = [ "wget",
                            "https://raw.githubusercontent.com/opencog/opencog/master/scripts/ocpkg",
                            "-O", "setup.sh" ],
                description = ["downloading", "script"],
                descriptionDone = ["downloaded","script"]
                ))
update_buildslaves.addStep(steps.ShellCommand(
                command = ["chmod", "700", "setup.sh"],
                description = ["configuring"],
                descriptionDone = ["configured"]
                ))
update_buildslaves.addStep(steps.ShellCommand(
                command = ["sudo", "./setup.sh", "-c"],
                description = ["installing", "cogutil" ],
                descriptionDone = ["installed","cogutil"]
                ))

c['builders'].append(BuilderConfig(name="update_buildslaves",
            slavenames = ["opencog","atomspace"],
            factory = update_buildslaves
            ))

### comment out this append to 'builder' value if you want to disable this
### builder.
c['builders'].append(BuilderConfig(name="cogutils_master_trusty",
            slavenames = ["cogutils"],
            factory = cogutils_master_trusty
            ))

## ****************************************************************************
## Configuration for atomspace repository master branch build and test on
## Ubuntu 14.04
## url: https://github.com/opencog/atomspace.git

### Builder Details
c['change_source'].append(GitPoller(
                'https://github.com/opencog/atomspace.git',
                workdir = 'gitpoller-workdir-atomspace',
                branches = ['master'],
                pollinterval = 10*60,
                project = 'atomspace'
                ))

c['schedulers'].append(schedulers.SingleBranchScheduler(
                name = "atomspace_master_trusty_full",
                change_filter = util.ChangeFilter(project='atomspace'),
                treeStableTimer = 2*60,
                builderNames = ["atomspace_master_trusty"]
                ))

### Steps
atomspace_master_trusty = BuildFactory()
atomspace_master_trusty.workdir = source_dir
atomspace_master_trusty.timeout = 2400

atomspace_master_trusty.addStep(steps.Git(
                repourl = 'https://github.com/opencog/atomspace.git',
                mode = 'full',
                branch = 'master',
                progress = True
                ))

atomspace_master_trusty.addStep(rm_existing_build_dir)
atomspace_master_trusty.addStep(mkdir_build_dir)
atomspace_master_trusty.addStep(cmake_source)
atomspace_master_trusty.addStep(make_all)
atomspace_master_trusty.addStep(make_examples)
atomspace_master_trusty.addStep(make_tests)
atomspace_master_trusty.addStep(run_tests)
atomspace_master_trusty.addStep(make_doxygen)
atomspace_master_trusty.addStep(copy_doxygen_docs)

### comment out this append to 'builder' value if you want to disable this
### builder.
c['builders'].append(BuilderConfig(name="atomspace_master_trusty",
            slavenames = ["atomspace"],
            factory = atomspace_master_trusty
            ))

## ****************************************************************************
## Configuration for opencog repository master branch build and test on
## Ubuntu 14.04
## url: https://github.com/opencog/opencog

### Builder Details
c['change_source'].append(GitPoller(
                'git://github.com/opencog/opencog.git',
                workdir = 'gitpoller-workdir-opencog',
                branches = ['master'],
                pollinterval = 10*60,
                project = 'opencog'
                ))

c['schedulers'].append(schedulers.SingleBranchScheduler(
                name = "opencog_master_trusty_full",
                change_filter = util.ChangeFilter(project='opencog'),
                treeStableTimer = 2*60,
                builderNames = ["opencog_master_trusty"]
                ))

### Steps
opencog_master_trusty = BuildFactory()
opencog_master_trusty.workdir = source_dir
opencog_master_trusty.timeout = 2400

opencog_master_trusty.addStep(steps.Git(
                repourl = 'git://github.com/opencog/opencog.git',
                mode = 'full',
                branch = 'master',
                progress = True
                ))

opencog_master_trusty.addStep(rm_existing_build_dir)
opencog_master_trusty.addStep(mkdir_build_dir)
opencog_master_trusty.addStep(cmake_source)
opencog_master_trusty.addStep(make_all)
opencog_master_trusty.addStep(make_examples)
opencog_master_trusty.addStep(make_tests)
opencog_master_trusty.addStep(run_tests)
opencog_master_trusty.addStep(make_doxygen)
opencog_master_trusty.addStep(copy_doxygen_docs)

### comment out this append to 'builder' value if you want to disable this
### builder.
c['builders'].append(BuilderConfig(name="opencog_master_trusty",
            slavenames = ["opencog"],
            factory = opencog_master_trusty
            ))

## ****************************************************************************
## Configuration for opencog repository master branch build and test on
## Windows 7
## url: https://github.com/opencog/unity3d-opencog-game

### Builder Details
c['change_source'].append(GitPoller(
                'git://github.com/opencog/unity3d-opencog-game.git',
                workdir = 'gitpoller-workdir-unity3d-opencog-game',
                branches = ['master'],
                pollinterval = 10*60,
                project = 'unity3d_opencog_game'
                ))

c['schedulers'].append(schedulers.SingleBranchScheduler(
                name = "unity_3d_full",
                change_filter =
                    util.ChangeFilter(project='unity3d_opencog_game'),
                treeStableTimer = 5*60,
                builderNames = ["unity3d_opencog_game_master_win7"]
                ))

### Steps
unity3d_opencog_game_master_win7 = BuildFactory()

unity3d_opencog_game_master_win7.addStep(steps.Git(
                repourl = 'git://github.com/opencog/unity3d-opencog-game',
                mode = 'full',
                branch = 'master',
                progress = True
                ))
unity3d_opencog_game_master_win7.addStep(steps.Compile(
                description = ["publishing", "win32", "player"],
                descriptionDone = ["published", "win32", "player"],
                command = [r'C:\Unity\Editor\Unity.exe', "-batchMode", "-quit",
                            "-nographics", "-projectPath",
                            Interpolate('%(prop:workdir)s\\build'),
                            "-executeMethod",
                            "OpenCog.Automation.OCAutomatedPlayerBuilder.BuildStandaloneWindows32Player"],
                logfiles={"Editor.log":
                            {"filename":
                                "../../../AppData/Local/Unity/Editor/Editor.log",
                             "follow": True}}
                ))
unity3d_opencog_game_master_win7.addStep(steps.Compile(
                description = ["publishing", "win64", "player"],
                descriptionDone = ["published", "win64", "player"],
                command = [r'C:\Unity\Editor\Unity.exe', "-batchMode", "-quit",
                            "-nographics", "-projectPath",
                            Interpolate('%(prop:workdir)s\\build'),
                            "-executeMethod",
                            "OpenCog.Automation.OCAutomatedPlayerBuilder.BuildStandaloneWindows64Player"],
                logfiles = {"Editor.log":
                                {"filename":
                                    "../../../AppData/Local/Unity/Editor/Editor.log",
                                "follow": True}}
                ))
unity3d_opencog_game_master_win7.addStep(steps.Compile(
                description = ["publishing", "linux32", "test", "player"],
                descriptionDone = ["published", "linux32", "test", "player"],
                command = [r'C:\Unity\Editor\Unity.exe', "-batchMode", "-quit",
                            "-nographics", "-projectPath",
                            Interpolate('%(prop:workdir)s\\build'),
                            "-executeMethod",
                            "OpenCog.Automation.OCAutomatedPlayerBuilder.BuildStandaloneLinux32Player"],
                logfiles = {"Editor.log":
                                {"filename":
                                    "../../../AppData/Local/Unity/Editor/Editor.log",
                                "follow": True}}
                ))
unity3d_opencog_game_master_win7.addStep(steps.Compile(
                description = ["publishing", "linux64", "test", "player"],
                descriptionDone = ["published", "linux64", "test", "player"],
                command = [r'C:\Unity\Editor\Unity.exe', "-batchMode", "-quit",
                            "-nographics", "-projectPath",
                            Interpolate('%(prop:workdir)s\\build'),
                            "-executeMethod",
                            "OpenCog.Automation.OCAutomatedPlayerBuilder.BuildStandaloneLinux64Player"],
                logfiles = {"Editor.log":
                                {"filename":
                                    "../../../AppData/Local/Unity/Editor/Editor.log",
                                "follow": True}}
                ))
unity3d_opencog_game_master_win7.addStep(steps.ShellCommand(
                description = ["fixing", "permissions"],
                descriptionDone = ["fix", "permissions"],
                command = [r'C:\cygwin\bin\chmod.exe', "-Rv", "+rx", "..\Players"]
                ))
unity3d_opencog_game_master_win7.addStep(steps.ShellCommand(
                description = ["copying", "players", "to", "theosophus"],
                descriptionDone = ["copyed", "players", "to", "theosophus"],
                command = [r'C:\cygwin\bin\scp.exe', "-rv", "..\Players",
                            "buildbot@158.132.58.88:~/Players"]
                ))
unity3d_opencog_game_master_win7.addStep(steps.ShellCommand(
                description = ["copying", "players", "to", "aristotle"],
                descriptionDone = ["copyed", "players", "to", "aristotle"],
                command = [r'C:\cygwin\bin\scp.exe', "-rv", "..\Players",
                            "buildbot@158.132.58.86:~/Players"]
                ))
'''unity3d_opencog_game_master_win7.addStep(steps.Test(
                description = ["testing", "win32", "player"],
                descriptionDone = ["test", "win32", "player"],
                command = [Interpolate('%(prop:workdir)s\\build\\Players\\Unity3DGameWorldPlayer_Windows32.exe'),
                            "test:internal_XGA", "quit",
                            "UNITTEST_WORLD:true", "UNITTEST_EMBODIMENT:true",
                            "UNITTEST_BLOCK:true", "UNITTEST_PLAN:true",
                            "UNITTEST_SECONDPLAN:true" ]
                ))'''

### comment out this append to 'builder' value if you want to disable this
### builder.
c['builders'].append(BuilderConfig(name="unity3d_opencog_game_master_win7",
            slavenames = ["cicero-slave"],
            factory = unity3d_opencog_game_master_win7
            ))
