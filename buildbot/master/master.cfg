c = BuildmasterConfig = {}


####### BUILDSLAVES
from buildbot.buildslave import BuildSlave

c['slaves'] = []
c['slaves'].append(BuildSlave("aristotle-slave", "XXXXXX"))
c['slaves'].append(BuildSlave("cicero-slave", "XXXXXX"))
c['slaves'].append(BuildSlave("zera", "XXXXXX"))


c['slavePortnum'] = 9989


####### CHANGESOURCES
from buildbot.changes.gitpoller import GitPoller

c['change_source'] = []
c['change_source'].append(GitPoller(
                'git://github.com/opencog/opencog.git',
                workdir = 'gitpoller-workdir',
                branches = ['master'],
                pollinterval = 10*60,
                project = 'opencog_master'
                ))
c['change_source'].append(GitPoller(
                'git://github.com/opencog/unity3d-opencog-game.git',
                workdir = 'gitpoller-workdir-unity3d-opencog-game',
                branches = ['master'],
                pollinterval = 10*60,
                project = 'unity3d_game'
                ))


####### SCHEDULERS
# TODO: add a scheduler for daily build of code documentation for all repo and
# update the site links.
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter

c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                name = "opencog_master_precise",
                change_filter = filter.ChangeFilter(project='opencog_master'),
                treeStableTimer = 5*60,
                builderNames = ["opencog_master_precise"]
                ))
c['schedulers'].append(SingleBranchScheduler(
                name = "opencog_master_trusty",
                change_filter = filter.ChangeFilter(project='opencog_master'),
                treeStableTimer = 2*60,
                builderNames = ["opencog_master_trusty"]
                ))
c['schedulers'].append(SingleBranchScheduler(
                name = "unity_3d",
                change_filter = filter.ChangeFilter(project='unity3d_game'),
                treeStableTimer = 5*60,
                builderNames = ["unity3d_game"]
                ))
c['schedulers'].append(ForceScheduler(
                name = "force",
                builderNames = ["opencog_master_precise",
                                "opencog_master_trusty",
                                "doxygen",
                                "unity3d_game"]
                ))



####### BUILDERS
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, Configure, Compile, Test
from buildbot.process.properties import Property, Interpolate
import os.path

cmake_build_dir = "build"

# Builder for OpenCog Master Branch Build and Test on Ubuntu 12.04
opencog_master_precise = BuildFactory()
opencog_master_precise.workdir = "source"

opencog_master_precise.addStep(Git(
                repourl = 'git://github.com/opencog/opencog.git',
                mode = 'full',
                branch = 'master'
                ))
# This maybe enabled for another builder for integration testing or ...
#opencog_master_precise.addStep(ShellCommand(
#           description=["copy","test config"],
#           command=["cp", "../../opencog-test.conf.example", "lib/opencog-test.conf"]
#           ))
opencog_master_precise.addStep(ShellCommand(
                command = ["rm","-rf", cmake_build_dir],
                description = ["removing", "existing", "build", "directory"],
                descriptionDone = ["removed","existing", "build", "directory"]
                ))
opencog_master_precise.addStep(ShellCommand(
                command = ["mkdir","-p", cmake_build_dir],
                description = ["making", "build", "directory"],
                descriptionDone = ["made", "build", "directory"]
                ))
opencog_master_precise.addStep(Configure(
                workdir = os.path.join("source", cmake_build_dir),
                command = ["cmake", ".."],
                description = ["configuring", "build", "using", "cmake"],
                descriptionDone = ["configured", "for", "build", "and", "test"]
                ))
opencog_master_precise.addStep(Compile(
                workdir = os.path.join("source", cmake_build_dir),
                command = ["make", "-j10"],
                description = ["making", "all"],
                descriptionDone = ["make", "all"]
                ))
opencog_master_precise.addStep(Compile(
                workdir = os.path.join("source", cmake_build_dir),
                command = ["make", "-j10" , "examples"],
                description = ["making", "examples"],
                descriptionDone = ["make", "examples"]
                ))
opencog_master_precise.addStep(Compile(
                workdir = os.path.join("source", cmake_build_dir),
                command = ["make", "-j10" , "tests"],
                description = ["making", "tests"],
                descriptionDone = ["make", "tests"]
                ))
opencog_master_precise.addStep(Test(
                workdir = os.path.join("source", cmake_build_dir),
                command = ["make", "test"],
                description = ["running", "tests"],
                descriptionDone = ["run", "tests"],
                logfiles = {"testlog":
                                {"filename":
                                    "tests/Testing/Temporary/LastTest.log.tmp"}}
                ))


# Builder for OpenCog Master Branch Build and Test on Ubuntu 14.04
opencog_master_trusty = BuildFactory()
opencog_master_trusty.workdir = "source"

opencog_master_trusty.addStep(Git(
                repourl = 'git://github.com/opencog/opencog.git', 
                mode = 'full',
                branch = 'master'
                ))
opencog_master_trusty.addStep(ShellCommand(
                command = ["rm","-rf", cmake_build_dir],
                description = ["removing", "existing", "build", "directory"],
                descriptionDone = ["removed","existing", "build", "directory"]
                ))
opencog_master_trusty.addStep(ShellCommand(
                command = ["mkdir","-p", cmake_build_dir],
                description = ["making", "build", "directory"],
                descriptionDone = ["made", "build", "directory"]
                ))
opencog_master_trusty.addStep(Configure(
                workdir = os.path.join("source", cmake_build_dir),
                command = ["cmake", ".."],
                description = ["configuring", "build", "using", "cmake"],
                descriptionDone = ["configured", "for", "build", "and", "test"]
                ))
opencog_master_trusty.addStep(Compile(
                workdir = os.path.join("source", cmake_build_dir),
                command = ["make", "-j10"],
                description = ["making", "all"],
                descriptionDone = ["make", "all"]
                ))
opencog_master_trusty.addStep(Compile(
                workdir = os.path.join("source",cmake_build_dir),
                command = ["make", "-j10" , "examples"],
                description = ["making", "examples"],
                descriptionDone = ["make", "examples"]
                ))
opencog_master_trusty.addStep(Compile(
                workdir = os.path.join("source", cmake_build_dir),
                command = ["make", "-j10" , "tests"],
                description = ["making", "tests"],
                descriptionDone = ["make", "tests"]
                ))
opencog_master_trusty.addStep(Test(
                workdir = os.path.join("source", cmake_build_dir),
                command = ["make",  "test"],
                description = ["running", "tests"],
                descriptionDone = ["run", "tests"],
                logfiles = {"testlog":
                                {"filename":
                                    "tests/Testing/Temporary/LastTest.log.tmp"}}
                ))


# Builders for OpenCog's Unity3D Game Players
unity3d_game = BuildFactory()

unity3d_game.addStep(Git(
                repourl = 'git://github.com/opencog/unity3d-opencog-game',
                mode = 'full',
                branch = 'master'
                ))
unity3d_game.addStep(Compile(
                description = ["publishing", "win32", "player"],
                descriptionDone = ["published", "win32", "player"],
                command = [r'C:\Unity\Editor\Unity.exe', "-batchMode", "-quit",
                            "-nographics", "-projectPath",
                            Interpolate('%(prop:workdir)s\\build'),
                            "-executeMethod",
                            "OpenCog.Automation.OCAutomatedPlayerBuilder.BuildStandaloneWindows32Player"],
                logfiles={"Editor.log":
                            {"filename":
                                "../../../AppData/Local/Unity/Editor/Editor.log",
                             "follow": True}}
                ))
unity3d_game.addStep(Compile(
                description = ["publishing", "win64", "player"],
                descriptionDone = ["published", "win64", "player"],
                command = [r'C:\Unity\Editor\Unity.exe', "-batchMode", "-quit",
                            "-nographics", "-projectPath",
                            Interpolate('%(prop:workdir)s\\build'),
                            "-executeMethod",
                            "OpenCog.Automation.OCAutomatedPlayerBuilder.BuildStandaloneWindows64Player"],
                logfiles = {"Editor.log":
                                {"filename":
                                    "../../../AppData/Local/Unity/Editor/Editor.log",
                                "follow": True}}
                ))
unity3d_game.addStep(Compile(
                description = ["publishing", "linux32", "test", "player"],
                descriptionDone = ["published", "linux32", "test", "player"],
                command = [r'C:\Unity\Editor\Unity.exe', "-batchMode", "-quit",
                            "-nographics", "-projectPath",
                            Interpolate('%(prop:workdir)s\\build'),
                            "-executeMethod",
                            "OpenCog.Automation.OCAutomatedPlayerBuilder.BuildStandaloneLinux32Player"],
                logfiles = {"Editor.log":
                                {"filename":
                                    "../../../AppData/Local/Unity/Editor/Editor.log",
                                "follow": True}}
                ))
unity3d_game.addStep(Compile(
                description = ["publishing", "linux64", "test", "player"],
                descriptionDone = ["published", "linux64", "test", "player"],
                command = [r'C:\Unity\Editor\Unity.exe', "-batchMode", "-quit",
                            "-nographics", "-projectPath",
                            Interpolate('%(prop:workdir)s\\build'),
                            "-executeMethod",
                            "OpenCog.Automation.OCAutomatedPlayerBuilder.BuildStandaloneLinux64Player"],
                logfiles = {"Editor.log":
                                {"filename":
                                    "../../../AppData/Local/Unity/Editor/Editor.log",
                                "follow": True}}
                ))
unity3d_game.addStep(ShellCommand(
                description = ["fixing", "permissions"],
                descriptionDone = ["fix", "permissions"],
                command = [r'C:\cygwin\bin\chmod.exe', "-Rv", "+rx", "..\Players"]
                ))
unity3d_game.addStep(ShellCommand(
                description = ["copying", "players", "to", "theosophus"],
                descriptionDone = ["copyed", "players", "to", "theosophus"],
                command = [r'C:\cygwin\bin\scp.exe', "-rv", "..\Players",
                            "buildbot@158.132.58.88:~/Players"]
                ))
unity3d_game.addStep(ShellCommand(
                description = ["copying", "players", "to", "aristotle"],
                descriptionDone = ["copyed", "players", "to", "aristotle"],
                command = [r'C:\cygwin\bin\scp.exe', "-rv", "..\Players",
                            "buildbot@158.132.58.86:~/Players"]
                ))
unity3d_game.addStep(Test(
                description = ["testing", "win32", "player"],
                descriptionDone = ["test", "win32", "player"],
                command = [Interpolate('%(prop:workdir)s\\build\\Players\\Unity3DGameWorldPlayer_Windows32.exe'),
                            "test:internal_XGA", "quit",
                            "UNITTEST_WORLD:true", "UNITTEST_EMBODIMENT:true",
                            "UNITTEST_BLOCK:true", "UNITTEST_PLAN:true",
                            "UNITTEST_SECONDPLAN:true" ]
                ))

# Builder for OpenCog Code documentation built from code on Ubuntu 12.04
doxygen = BuildFactory()
doxygen.workdir = "source"

doxygen.addStep(Git(
            repourl = 'git://github.com/opencog/opencog.git',
            mode = 'full',
            branch = 'master'
            ))
doxygen.addStep(Configure(
            command = ["cmake", "."]
            ))
doxygen.addStep(Compile(
            command = ["make", "doxygen"],
            description = ["making","documentation"],
            descriptionDone = ["make", "documentation"]
            ))


from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(BuilderConfig(name="opencog_master_precise",
            slavenames = ["aristotle-slave"],
            factory = opencog_master_precise
            ))
c['builders'].append(BuilderConfig(name="opencog_master_trusty",
            slavenames = ["zera"],
            factory = opencog_master_trusty
            ))
c['builders'].append(BuilderConfig(name="doxygen",
            slavenames = ["aristotle-slave"],
            factory = doxygen
            ))
c['builders'].append(BuilderConfig(name="unity3d_game",
            slavenames = ["cicero-slave"],
            factory = unity3d_game
            ))


####### STATUS TARGETS

c['status'] = []

from buildbot.status import html, words, mail
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
            gracefulShutdown = False,
            forceBuild = True,
            forceAllBuilds = False,
            pingBuilder = False,
            stopBuild = False,
            stopAllBuilds = False,
            cancelPendingBuild = False,
            )
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

irc = words.IRC("irc.freenode.org", "opencog-buildbot",
            useColors=True,
            channels=[{"channel":  "opencog"}],
            # {"password": "XXXXXX" }],
            password="XXXXXX",
            allowForce=True,
            notify_events={
            # 'started': 1,
            # 'finished': 1,
            'exception': 1,
            'successToFailure': 1,
            'failureToSuccess': 1,
            })
c['status'].append(irc)

c['status'].append(mail.MailNotifier(
            fromaddr="buildbot@opencog.org",
            useTls=True,
            relayhost="smtp.gmail.com",
            smtpPort=587,
            smtpUser="buildbot@opencog.org",
            smtpPassword="XXXXXX",
            extraRecipients=["opencog-buildbot@googlegroups.com"],
            sendToInterestedUsers=True
            ))


####### PROJECT IDENTITY

c['title'] = "OpenCog"
c['titleURL'] = "http://opencog.org"

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {'db_url' : "sqlite:///state.sqlite"}

